{"version":3,"file":"assert.esm.js","sources":["../lib/assert/assertion-types.ts","../lib/assert/errors/assertion-error.ts","../lib/assert/basic/fail.ts","../lib/assert/errors/logic-error.ts","../lib/assert/basic/is-truthy.ts","../lib/assert/basic/is-falsy.ts","../lib/assert/basic/is-empty.ts","../lib/assert/errors/type-error.ts","../lib/assert/types/is-bool.ts","../lib/assert/types/is-not-bool.ts","../lib/assert/types/is-true.ts","../lib/assert/types/is-not-true.ts","../lib/assert/types/is-false.ts","../lib/assert/types/is-not-false.ts","../lib/assert/value-formatter.ts","../lib/assert/errors/unexpected-value-error.ts","../lib/assert/types/instance-of.ts","../lib/assert/index.ts"],"sourcesContent":["export enum assertionTypes {\n  // Basic\n  FAIL,\n  IS_TRUTHY,\n  IS_FALSY,\n  IS_EMPTY,\n  IS_NOT_EMPTY,\n\n  // Types\n  IS_DEFINED,\n  IS_UNDEFINED,\n  IS_NULL,\n  IS_NOT_NULL,\n  IS_BOOL,\n  IS_NOT_BOOL,\n  IS_TRUE,\n  IS_NOT_TRUE,\n  IS_FALSE,\n  IS_NOT_FALSE,\n  IS_NUMBER,\n  IS_NOT_NUMBER,\n  IS_NAN,\n  IS_NOT_NAN,\n  IS_STRING,\n  IS_NOT_STRING,\n  IS_ARRAY,\n  IS_NOT_ARRAY,\n  IS_FUNCTION,\n  IS_NOT_FUNCTION,\n  IS_SYMBOL,\n  IS_NOT_SYMBOL,\n  INSTANCE_OF,\n  NOT_INSTANCE_OF,\n  ONE_OF_TYPE,\n  NOT_ONE_OF_TYPE,\n\n  // Expressions\n  EQUAL,\n  NOT_EQUAL,\n  GREATER_THAN,\n  GREATER_THAN_OR_EQUAL,\n  LOWER_THAN,\n  LOWER_THAN_OR_EQUAL,\n  BETWEEN,\n  OUTSIDE,\n\n  // Utils\n};","import { assertionTypes } from '../assertion-types';\n\n/**\n * Basic assertion error class\n * It is used to be thrown when assertion failed\n * You can precise discover assertion which caused error by type or id\n * @class\n */\nexport class AssertionError extends Error {\n  type: assertionTypes;\n  id: string;\n\n  constructor(type: assertionTypes, message: string, id: string) {\n    super(message);\n\n    this.type = type;\n    this.id = id;\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n}","import { AssertionError } from '../errors/assertion-error';\nimport { assertionTypes } from '../assertion-types';\n\n/**\n * Always throw AssertError\n * @param message\n * @param id\n * @returns void\n */\nexport function fail(message: string = '', id: string = '') {\n  throw new AssertionError(assertionTypes.FAIL, message, id);\n}","import { AssertionError } from './assertion-error';\nimport { assertionTypes } from '../assertion-types';\n\nexport class LogicError {\n  static throw(type: assertionTypes, value: any, message: string, id: string) {\n    console.log('Logic error value: ', value);\n\n    return new AssertionError(type, message, id);\n  }\n}","import { LogicError } from '../errors/logic-error';\nimport { assertionTypes } from '../assertion-types';\n\n/**\n * Assert if given value is truthy\n * @param {T} value\n * @param message\n * @param id\n * @returns {T}\n */\nexport function isTruthy<T>(value: T, message: string = '', id: string = ''): T {\n  if (value) {\n    return value;\n  }\n\n  throw LogicError.throw(assertionTypes.IS_TRUTHY, value, message, id);\n}","import { LogicError } from '../errors/logic-error';\nimport { assertionTypes } from '../assertion-types';\n\n/**\n * Assert if given value is falsy\n * @param {T} value\n * @param message\n * @param id\n * @returns {T}\n */\nexport function isFalsy<T>(value: T, message: string = '', id: string = ''): T {\n  if (!value) {\n    return value;\n  }\n\n  throw LogicError.throw(assertionTypes.IS_FALSY, value, message, id);\n}","import { LogicError } from '../errors/logic-error';\nimport { assertionTypes } from '../assertion-types';\n\n/**\n * Assert if given value is empty\n * @param {T} value\n * @param message\n * @param id\n * @returns {T}\n */\nexport function isEmpty<T>(value: T, message: string = '', id: string = ''): T {\n  if (\n    (typeof value === 'string' && value.length !== 0) ||\n    (typeof value === 'number' && value !== 0) ||\n    (typeof value === 'function') ||\n    (typeof value === 'symbol')\n  ) {\n    return value;\n  }\n\n  // Check if object has any property\n  // if (typeof value === 'object' && value !== null) {\n  //   for (let key in value) {\n  //     if (hasOwnProperty.call(value, key)) {\n  //       return value;\n  //     }\n  //   }\n  // }\n\n  throw LogicError.throw(assertionTypes.IS_EMPTY, value, message, id);\n}","import { AssertionError } from './assertion-error';\nimport { assertionTypes } from '../assertion-types';\n\nexport class TypeError {\n  static throw(type: assertionTypes, value: any, expectedType: string, message: string, id: string) {\n    message = 'TypeError' + \"\\n\";\n    message += 'The specified type does not match the expected type' + \"\\n\\n\";\n    message += 'Current type: ' + (typeof value) + \"\\n\";\n    message += 'Expected type: ' + expectedType + \"\\n\";\n\n    return new AssertionError(type, message, id);\n  }\n}","import { TypeError } from '../errors/type-error';\nimport { assertionTypes } from '../assertion-types';\n\n/**\n * Assert isBool\n * @param {T} value\n * @param message\n * @param id\n * @returns {T}\n */\nexport function isBool<T>(value: T, message: string = '', id: string = ''): T {\n  if (typeof value === 'boolean') {\n    return value;\n  }\n\n  throw TypeError.throw(assertionTypes.IS_BOOL, value, 'bool', message, id);\n}","import { TypeError } from '../errors/type-error';\nimport { assertionTypes } from '../assertion-types';\n\n/**\n * Assert isNotBool\n * @param {T} value\n * @param message\n * @param id\n * @returns {T}\n */\nexport function isNotBool<T>(value: T, message: string = '', id: string = ''): T {\n  if (typeof value !== 'boolean') {\n    return value;\n  }\n\n  throw TypeError.throw(assertionTypes.IS_NOT_BOOL, value, '!bool', message, id);\n}","import { TypeError } from '../errors/type-error';\nimport { assertionTypes } from '../assertion-types';\n\n/**\n * Assert isTrue\n * @param {T} value\n * @param message\n * @param id\n * @returns {T}\n */\nexport function isTrue<T>(value: T, message: string = '', id: string = ''): T {\n  if (value as any === true) {\n    return value;\n  }\n\n  throw TypeError.throw(assertionTypes.IS_TRUE, value, 'bool[true]', message, id);\n}","import { TypeError } from '../errors/type-error';\nimport { assertionTypes } from '../assertion-types';\n\n/**\n * Assert isNotTrue\n * @param {T} value\n * @param message\n * @param id\n * @returns {T}\n */\nexport function isNotTrue<T>(value: T, message: string = '', id: string = ''): T {\n  if (value as any !== true) {\n    return value;\n  }\n\n  throw TypeError.throw(assertionTypes.IS_NOT_TRUE, value, '!true', message, id);\n}","import { TypeError } from '../errors/type-error';\nimport { assertionTypes } from '../assertion-types';\n\n/**\n * Assert isFalse\n * @param {T} value\n * @param message\n * @param id\n * @returns {T}\n */\nexport function isFalse<T>(value: T, message: string = '', id: string = ''): T {\n  if (value as any === false) {\n    return value;\n  }\n\n  throw TypeError.throw(assertionTypes.IS_FALSE, value, 'bool[false]', message, id);\n}","import { TypeError } from '../errors/type-error';\nimport { assertionTypes } from '../assertion-types';\n\n/**\n * Assert isNotFalse\n * @param {T} value\n * @param message\n * @param id\n * @returns {T}\n */\nexport function isNotFalse<T>(value: T, message: string = '', id: string = ''): T {\n  if (value as any !== false) {\n    return value;\n  }\n\n  throw TypeError.throw(assertionTypes.IS_NOT_FALSE, value, '!false', message, id);\n}","/**\n * Render any value with human readable form\n * @class\n */\nexport class ValueFormatter {\n  static format(value: any): string {\n    console.log(value);\n    return 'rendered value ;-)';\n  }\n}","import { AssertionError } from './assertion-error';\nimport { assertionTypes } from '../assertion-types';\nimport { ValueFormatter } from '../value-formatter';\n\nexport class UnexpectedValueError {\n  static throw(type: assertionTypes, currentValue: any, expectedValue: any, message: string, id: string) {\n\n    message = 'UnexpectedValueError' + \"\\n\";\n    message += 'The value provided is not compatible with the expected value' + \"\\n\\n\";\n    message += 'Current value: ' + ValueFormatter.format(currentValue) + \"\\n\";\n    message += 'Expected value: ' + ValueFormatter.format(expectedValue) + \"\\n\";\n\n    return new AssertionError(type, message, id);\n  }\n}","import { UnexpectedValueError } from '../errors/unexpected-value-error';\nimport { assertionTypes } from '../assertion-types';\n\n/**\n * Assert instanceOf\n * @param {T} value\n * @param expectedInstance\n * @param message\n * @param id\n * @returns {T}\n * @throws UnexpectedValueError\n */\nexport function instanceOf<T>(value: T, expectedInstance: any, message: string = '', id: string = ''): T {\n  if (value instanceof expectedInstance) {\n    return value;\n  }\n\n  throw UnexpectedValueError.throw(assertionTypes.INSTANCE_OF, value, expectedInstance, message, id);\n}","// Assertion types\nexport * from './assertion-types';\n\n// Assertion error\nexport * from './errors/assertion-error';\n\n// Basic\nexport * from './basic/fail';\nexport * from './basic/is-truthy';\nexport * from './basic/is-falsy';\nexport * from './basic/is-empty';\n\n// Types\nexport * from './types/is-bool';\nexport * from './types/is-not-bool';\nexport * from './types/is-true';\nexport * from './types/is-not-true';\nexport * from './types/is-false';\nexport * from './types/is-not-false';\nexport * from './types/instance-of';\n\n// Expressions\n//   greater than, lower than etc.\n\n// Utils\n//   regexp assertions etc."],"names":["tslib_1.__extends","TypeError"],"mappings":"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"}